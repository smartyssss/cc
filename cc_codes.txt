WRITE A PROGRAM FOR IMPLEMENTING CLIENT SERVER COMMUNICATION MODEL USING TCP.

PRACTICAL 1A :-
A client server based program using TCP to find if the number entered is prime.
Code :-
1. tcpServerPrime.java

import java.net.*;
import java.io.*;
class tcpServerPrime
{
public static void main(String args[])
{
try
{
ServerSocket ss = new ServerSocket(8001);
System.out.println("Server Started. ............. ");
Socket s = ss.accept();
DataInputStream in = new DataInputStream(s.getInputStream()); int x= in.readInt();
DataOutputStream otc = new DataOutputStream(s.getOutputStream()); int y = x/2;
if(x ==1 || x ==2 || x ==3)
{
otc.writeUTF(x + "is Prime");
System.exit(0);
}
for(int i=2; i<=y; i++)
{
if(x%i != 0)
{
otc.writeUTF(x + " is Prime");
}
else
{
}
}
}
otc.writeUTF(x + " is not Prime");
catch(Exception e)
{
System.out.println(e.toString());
}
}
}



2. tcpClientPrime.java
import java.net.*;
import java.io.*;
class tcpClientPrime
{
public static void main(String args[])
{
try
{
Socket cs = new Socket("LocalHost",8001); BufferedReader infu = new
BufferedReader(new
InputStreamReader(System.in));
System.out.println("Enter a number : ");
int a = Integer.parseInt(infu.readLine());
DataOutputStream out = new
DataOutputStream(cs.getOutputStream());
out.writeInt(a);
DataInputStream in = new DataInputStream(cs.getInputStream());
System.out.println(in.readUTF()); cs.close();
}
catch(Exception e)
{
System.out.println(e.toString());
}
}
}


>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<
A client server TCP based chatting application.
Code :-
1. ChatServer.java
import java.net.*;
import java.io.*;
class ChatServer
{
public static void main(String args[])
{
try
{
ServerSocket ss = new ServerSocket(8000);
System.out.println("Waiting for client to connect..");
Socket s = ss.accept();
BufferedReader br = new BufferedReader(new
InputStreamReader(System.in));
DataOutputStream out = new DataOutputStream(s.getOutputStream());
DataInputStream in = new DataInputStream(s.getInputStream());
String receive, send;
while((receive = in.readLine()) != null)
{
}
br.close();
in.close();
out.close();
s.close();
}
if(receive.equals("STOP"))
break;
System.out.println("Client Says : "+receive);
System.out.print("Server Says : ");
send = br.readLine();
out.writeBytes(send+"\n");
catch(Exception e)
{
e.printStackTrace();
}
}
}


2. ChatClient.java
import java.net.*;
import java.io.*;
class ChatClient
{
public static void main(String args[])
{
try
{
Socket s = new Socket("Localhost",8000);
BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
DataOutputStream out = new DataOutputStream(s.getOutputStream());
DataInputStream in = new DataInputStream(s.getInputStream());
String msg;
System.out.println("To stop chatting with server type STOP");
System.out.print("Client Says: ");
while((msg = br.readLine()) != null)
{
out.writeBytes(msg+"\n");
if(msg.equals("STOP"))
break;
System.out.println("Server Says : "+in.readLine());
System.out.print("Client Says : ");
}
br.close();
in.close();
out.close();
s.close();
}
catch(Exception e)
{
e.printStackTrace();
}
}
}



>>>>>>>>>>>><<<<<<<<<<<<<<<<<
AIM :- WRITE A PROGRAM FOR IMPLEMENTING CLIENT SERVER COMMUNICATION MODEL USING UDP.
PRACTICAL 2A :-

A client server based program using UDP to find if the number entered is even or odd.

Code :-
1. udpServerEO.java

/*Program which finds entered number is even or odd */
import java.io.*;
import java.net.*;
public class udpServerEO
{
public static void main(String args[])
{
try
{
DatagramSocket ds = new DatagramSocket(2000); byte b[] = new byte[1024];
DatagramPacket dp = new DatagramPacket(b,b.length); ds.receive(dp);
String str = new String(dp.getData(),0,dp.getLength());
System.out.println(str);
int a= Integer.parseInt(str);
String s= new String();
if (a%2 == 0)
s = "Number is even";
else
s = "Number is odd";
byte b1[] = new byte[1024];
b1 = s.getBytes();
DatagramPacket dp1 = new
DatagramPacket(b1,b1.length,InetAddress.getLocalHost(),1000);
ds.send(dp1);
}
catch(Exception e)
{
e.printStackTrace();
}
}
}


2. udpClientEO.java
import java.io.*;
import java.net.*;
public class udpClientEO
{
public static void main(String args[])
{
try
{
DatagramSocket ds = new DatagramSocket(1000); BufferedReader br = new
BufferedReader(new
InputStreamReader(System.in));
System.out.println("Enter a number : ");
String num = br.readLine();
byte b[] = new byte[1024];
b=num.getBytes();
DatagramPacket dp = new
DatagramPacket(b,b.length,InetAddress.getLocalHost(),2000);
ds.send(dp);
byte b1[] = new byte[1024];
DatagramPacket dp1 = new DatagramPacket(b1,b1.length); ds.receive(dp1);
String str = new String(dp1.getData(),0,dp1.getLength());
System.out.println(str);
}
catch(Exception e)
{
e.printStackTrace();
}
}
}

>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<

A client server based program using UDP to find the factorial of the entered number.
Code :-
1. udpServerFact.java
/*Program which calculate factorial of a number*/
import java.io.*;
import java.net.*;
public class udpServerFact
{
public static void main(String args[])
{
try
{
DatagramSocket ds = new DatagramSocket(2000);
byte b[] = new byte[1024];
DatagramPacket dp = new DatagramPacket(b,b.length);
ds.receive(dp);
String str = new
String(dp.getData(),0,dp.getLength());
System.out.println(str);
int a= Integer.parseInt(str);
int f = 1, i;
String s= new String();
for(i=1;i<=a;i++)
{
f=f*i;
}
s=Integer.toString(f);
String str1 = "The Factorial of " + str + " is : " +
f; byte b1[] = new byte[1024]; b1 =
str1.getBytes();
DatagramPacket dp1 = new
DatagramPacket(b1,b1.length,InetAddress.getLocalHost(),1000);
ds.send(dp1);
}
catch(Exception e)
{
e.printStackTrace();
}
}
}


2. udpClientFact.java
/*Program which calculate factorial of a number*/
import java.io.*;
import java.net.*;
public class udpClientFact
{
public static void main(String args[])
{
try
{
DatagramSocket ds = new DatagramSocket(1000);
BufferedReader br = new BufferedReader(new
InputStreamReader(System.in));
System.out.println("Enter a number : ");
String num = br.readLine();
byte b[] = new byte[1024];
b=num.getBytes();
DatagramPacket dp = new
DatagramPacket(b,b.length,InetAddress.getLocalHost(),2000);
ds.send(dp);
byte b1[] = new byte[1024];
DatagramPacket dp1 = new DatagramPacket(b1,b1.length);
ds.receive(dp1);
String str = new
String(dp1.getData(),0,dp1.getLength());
System.out.println(str);
}
catch(Exception e)
{
e.printStackTrace();
}
}
}


>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<
AIM :- A MULTICAST SOCKET EXAMPLE.
Code :-

1. BroadcastServer.java

import java.net.*;
import java.io.*;
import java.util.*;
public class BroadcastServer
{
public static final int PORT = 1234;
public static void main(String args[])throws
Exception
{
MulticastSocket socket;
DatagramPacket packet;
InetAddress address;
// set the multicast address to your local subnet
address = InetAddress.getByName("239.1.2.3");
socket = new MulticastSocket();
// join a Multicast group and send the group messages
socket.joinGroup(address);
byte[] data = null;
for(;;)
{
Thread.sleep(10000);
System.out.println("Sending ");
String str = ("This is Pushpa Calling. .. ");
data = str.getBytes();
packet = new DatagramPacket(data, str.length(),address,PORT);
// Sends the packet
socket.send(packet);
}
}
}

2. BroadcastClient.java
import java.net.*;
import java.io.*;
public class BroadcastClient
{
public static final int PORT = 1234;
public static void main(String args[])throws Exception
{
MulticastSocket socket;
DatagramPacket packet;
InetAddress address;
// set the mulitcast address to your local subnet
address = InetAddress.getByName("239.1.2.3");
socket = new MulticastSocket(PORT);
//join a Multicast group and wait for a message
socket.joinGroup(address);
byte[] data = new byte[100];
packet = new DatagramPacket(data,data.length);
for(;;)
{
"Message is : "+str);
}
socket.receive(packet);
String str = new String(packet.getData());
System.out.println("Message received from "+ packet.getAddress() +
}
}



>>>>>>>>>>>>>><<<<<<<<<<<<<<

AIM :- WRITE A PROGRAM TO SHOW THE OBJECT COMMUNICATION USING RMI.

A RMI based application program to display current date and time.
Code :-
1. InterDate.java
import java.rmi.*;
public interface InterDate extends Remote
{
public String display() throws Exception;
}
2. ServerDate.java
import java.rmi.*;
import java.rmi.server.*;
import java.util.*;
public class ServerDate extends UnicastRemoteObject implements
InterDate {
public ServerDate() throws Exception
{
}
public String display() throws Exception
{
String str = "";
Date d = new Date();
str = d.toString();
return str;
}
public static void main(String args[]) throws
Exception {
ServerDate s1 = new ServerDate();
Naming.bind("DS",s1);
System.out.println("Object registered. ... ");
}
}


3. ClientDate.java
import java.rmi.*;
import java.io.*;
public class ClientDate
{
public static void main(String args[]) throws
Exception {
String s1;
InterDate h1 = (InterDate)Naming.lookup("DS");
s1 = h1.display();
System.out.println(s1);
}
}